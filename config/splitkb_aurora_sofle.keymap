/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    // chain-length = <6>;
    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs

    chain-length = <29>; // Uncomment if using only per-key LEDs.
};

&mt { quick-tap-ms = <200>; };

&lt { quick-tap-ms = <200>; };

/ {
    macros {
        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC           &kp N1  &kp N2        &kp N3    &kp N4    &kp N5                           &kp N6           &kp N7         &kp N8     &kp N9    &kp N0            &kp LS(LA(LC(LEFT_GUI)))
&kp CAPSLOCK      &kp Q   &kp W         &kp E     &kp R     &kp T                            &kp Y            &kp U          &kp I      &kp O     &kp P             &caps_word
&kp LEFT_SHIFT    &kp A   &kp S         &kp D     &kp F     &kp G                            &kp H            &kp J          &kp K      &kp L     &kp SINGLE_QUOTE  &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp Z   &kp X         &kp C     &kp V     &kp B      &none        &none    &kp N            &kp M          &kp COMMA  &kp DOT   &kp FSLH          &kp RIGHT_CONTROL
                          &kp LEFT_ALT  &alt_tab  &kp LGUI  &lt 1 TAB  &kp SPACE    &kp RET  &lt 2 BACKSPACE  &kp RIGHT_WIN  &none      &kp RALT
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &kp F1                 &kp F2            &kp F3          &kp F4           &kp F5                       &kp F6         &kp F7                &kp F8                 &kp F9             &kp F10    &kp F11
&trans  &kp RS(RA(SEMICOLON))  &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp PIPE                     &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp CARET  &kp F12
&trans  &kp EXCL               &kp AT            &kp HASH        &kp DOLLAR       &kp PRCNT                    &kp ASTERISK   &kp MINUS             &kp EQUAL              &kp PLUS           &kp GRAVE  &trans
&trans  &kp ESCAPE             &kp RA(N5)        &kt RA(RS(S))   &kp BACKSLASH    &none      &trans    &trans  &kp TILDE      &kp UNDERSCORE        &kp SEMICOLON          &kp COLON          &none      &trans
                               &trans            &trans          &trans           &trans     &trans    &trans  &trans         &trans                &none                  &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &rgb_ug RGB_COLOR_HSB(288,100,50)  &rgb_ug RGB_HUD    &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI                    &rgb_ug RGB_COLOR_HSB(0,0,0)  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &to 3
&trans  &kp RA(Q)                          &kp C_PREVIOUS     &kp HOME         &kp C_NEXT       &kp PAGE_UP                        &kp RA(Y)                     &kp HOME         &kp INSERT       &kp END          &kp RA(P)        &kp C_AL_CALC
&trans  &none                              &kp RA(S)          &kp C_PREVIOUS   &kp C_PP         &kp LS(C_NEXT)                     &kp LEFT_ARROW                &kp DOWN_ARROW   &kp UP_ARROW     &kp RIGHT_ARROW  &none            &trans
&trans  &none                              &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE       &kp PAGE_DOWN    &trans    &trans  &kp DELETE                    &none            &none            &none            &none            &trans
                                           &trans             &trans           &trans           &trans           &trans    &trans  &trans                        &trans           &none            &trans
            >;
        };

        numpad {
            bindings = <
&trans  &none  &out OUT_BLE  &ext_power EP_ON   &rgb_ug RGB_ON   &rgb_ug RGB_SPI                    &kp KP_NUMLOCK  &kp KP_DIVIDE    &kp KP_ASTERISK  &kp KP_MINUS     &kp KP_PLUS    &kp C_AL_CALCULATOR
&trans  &none  &out OUT_USB  &ext_power EP_OFF  &rgb_ug RGB_OFF  &rgb_ug RGB_SPD                    &kp KP_EQUAL    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp BACKSPACE  &none
&trans  &none  &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2     &none                              &none           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &none          &trans
&trans  &none  &bt BT_SEL 3  &bt BT_SEL 4       &bt BT_CLR       &none            &none     &none   &kp KP_DOT      &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp COMMA      &to 0
               &trans        &trans             &trans           &trans           &trans    &trans  &trans          &kp KP_NUMBER_0  &none            &trans
            >;
        };
    };
};
